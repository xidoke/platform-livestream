/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Donation as PrismaDonation,
  Livestream as PrismaLivestream,
  User as PrismaUser,
} from "@prisma/client";

export class DonationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DonationCountArgs, "select">): Promise<number> {
    return this.prisma.donation.count(args);
  }

  async donations(
    args: Prisma.DonationFindManyArgs
  ): Promise<PrismaDonation[]> {
    return this.prisma.donation.findMany(args);
  }
  async donation(
    args: Prisma.DonationFindUniqueArgs
  ): Promise<PrismaDonation | null> {
    return this.prisma.donation.findUnique(args);
  }
  async createDonation(
    args: Prisma.DonationCreateArgs
  ): Promise<PrismaDonation> {
    return this.prisma.donation.create(args);
  }
  async updateDonation(
    args: Prisma.DonationUpdateArgs
  ): Promise<PrismaDonation> {
    return this.prisma.donation.update(args);
  }
  async deleteDonation(
    args: Prisma.DonationDeleteArgs
  ): Promise<PrismaDonation> {
    return this.prisma.donation.delete(args);
  }

  async getLivestream(parentId: string): Promise<PrismaLivestream | null> {
    return this.prisma.donation
      .findUnique({
        where: { id: parentId },
      })
      .livestream();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.donation
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
