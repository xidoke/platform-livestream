/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Chat } from "./Chat";
import { ChatCountArgs } from "./ChatCountArgs";
import { ChatFindManyArgs } from "./ChatFindManyArgs";
import { ChatFindUniqueArgs } from "./ChatFindUniqueArgs";
import { CreateChatArgs } from "./CreateChatArgs";
import { UpdateChatArgs } from "./UpdateChatArgs";
import { DeleteChatArgs } from "./DeleteChatArgs";
import { Livestream } from "../../livestream/base/Livestream";
import { User } from "../../user/base/User";
import { ChatService } from "../chat.service";
@graphql.Resolver(() => Chat)
export class ChatResolverBase {
  constructor(protected readonly service: ChatService) {}

  async _chatsMeta(
    @graphql.Args() args: ChatCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Chat])
  async chats(@graphql.Args() args: ChatFindManyArgs): Promise<Chat[]> {
    return this.service.chats(args);
  }

  @graphql.Query(() => Chat, { nullable: true })
  async chat(@graphql.Args() args: ChatFindUniqueArgs): Promise<Chat | null> {
    const result = await this.service.chat(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Chat)
  async createChat(@graphql.Args() args: CreateChatArgs): Promise<Chat> {
    return await this.service.createChat({
      ...args,
      data: {
        ...args.data,

        livestream: args.data.livestream
          ? {
              connect: args.data.livestream,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Chat)
  async updateChat(@graphql.Args() args: UpdateChatArgs): Promise<Chat | null> {
    try {
      return await this.service.updateChat({
        ...args,
        data: {
          ...args.data,

          livestream: args.data.livestream
            ? {
                connect: args.data.livestream,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Chat)
  async deleteChat(@graphql.Args() args: DeleteChatArgs): Promise<Chat | null> {
    try {
      return await this.service.deleteChat(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Livestream, {
    nullable: true,
    name: "livestream",
  })
  async getLivestream(
    @graphql.Parent() parent: Chat
  ): Promise<Livestream | null> {
    const result = await this.service.getLivestream(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Chat): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
